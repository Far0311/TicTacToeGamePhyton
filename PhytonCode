#  A simple Tic-Tac-Toe game
# Players 'X' and 'O' take turn inputing their position on the command line using numbers 1-9
# 1 | 2 | 3
# ---------
# 4 | 5 | 6
# ---------
# 7 | 8 | 9
#


# The Game Board 
board = {
    1: ' ', 2: ' ', 3: ' ',
    4: ' ', 5: ' ', 6: ' ',
    7: ' ', 8: ' ', 9: ' '
}

# TODO: update the gameboard with the user input
def markBoard(position, mark):
    board[position] = mark


# TODO: print the game board as described at the top of this code skeleton
# Will not be tested in Part 1
def printBoard():
    print(board[1] + ' | ' + board[2] + ' | ' + board[3])
    print('---------')
    print(board[4] + ' | ' + board[5] + ' | ' + board[6])
    print('---------')
    print(board[7] + ' | ' + board[8] + ' | ' + board[9])


# TODO: check for wrong input, this function should return True or False.
# True denoting that the user input is correct
# you will need to check for wrong input (user is entering invalid position) or position is out of bound
# another case is that the position is already occupied
def validateMove(position):
    position = int(position)
    return position in board and board[position] == ' ' #checks if the position is in the board and if it is empty

# TODO: list out all the combinations of winning, you will neeed this
# one of the winning combinations is already done for you
winCombinations = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
    [1, 4, 7],
    [2, 5, 8],
    [3, 6, 9],
    [1, 5, 9],
    [3, 5, 7]
]

# TODO: implement a logic to check if the previous winner just win
# This method should return with True or False
def checkWin(player):
    for combo in winCombinations:
        if all(board[position] == player for position in combo): #iterates through the winning combinations and checks if all the positions are the same as the player
            return True
    return False


# TODO: implement a function to check if the game board is already full
# For tic-tac-toe, tie bascially means the whole board is already occupied
# This function should return with boolean
def checkFull():
    return all(space != ' ' for space in board.values())



#########################################################
## Copy all your code/fucntions in Part 1 to above lines
## (Without Test Cases)
#########################################################

gameEnded = False
currentTurnPlayer = 'X'

# entry point of the whole program
print('Game started: \n\n' +
    ' 1 | 2 | 3 \n' +
    ' --------- \n' +
    ' 4 | 5 | 6 \n' +
    ' --------- \n' +
    ' 7 | 8 | 9 \n')

# Bonus Point: Implement the feature for the user to restart the game after a tie or game over
def Restart_Game():
    global board, gameEnded, currentTurnPlayer #the function will be modifying the global variables board, gameEnded, and currentTurnPlayer
    board = {i: ' ' for i in range (1, 10)} #creates a new dictionary board 
    gameEnded = False
    currentTurnPlayer = 'X'

# extra function to ask for restart
def ask_for_restart():
    while True:
        restart = input("Do you want to play again? (yes/no): ").lower()
        if restart == 'yes':
            Restart_Game()
            return False #Continue the Game - exit the while loop
        elif restart == 'no':
            print("See you again! Game Exited.")
            return True #End the Game 
        else:
            print("Please input (yes/no) only!")

# TODO: Complete the game play logic below
# You could reference the following flow
# 1. Ask for user input and validate the input
# 2. Update the board
# 3. Check win or tie situation
# 4. Switch User
while not gameEnded:
    printBoard()
    move = input(currentTurnPlayer + "'s turn, input (1 to 9): ")

    if move.lower() == 'exit': #player exits game
        print("Game exited.")
        if ask_for_restart():
            break
        continue

    if not move.isdigit() or not validateMove(int(move)): #player inputs invalid move
        print("Move Invalid. Move must be digit between 1 and 9 and must be empty. Try again")
        continue

    move = int(move) #converts move data type (string to integer)
    markBoard(move, currentTurnPlayer)

    if checkWin(currentTurnPlayer):
        printBoard()
        print(currentTurnPlayer + " wins!")
        gameEnded = True

    elif checkFull():
        printBoard()
        print("It's a tie!")
        gameEnded = True

    else: 
        currentTurnPlayer = 'O' if currentTurnPlayer == 'X' else 'X'

    if gameEnded:
        if ask_for_restart():
            break


